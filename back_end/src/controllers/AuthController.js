const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const User = require('../models/User')
const Role = require('../models/Role')
const ErrorResponse = require('../response/ErrorResponse')
const ApiResponse = require('../response/ApiResponse')
const Otp = require('../models/OtpToken')



const EmailService = require('../services/EmailService')
/* const ForgotToken = require('../models/mongo/ForgotToken') */
const randomBytes = require('../utils/randomBytes')
const { env } = require('../config/env')
const { OAuth2Client } = require('google-auth-library');
const client = new OAuth2Client('307086193257-v5iln2iovnbrsuoe99co5scevo46qih8.apps.googleusercontent.com');

class AuthController {
   
    async register(req, res, next) {
        try {
            const { name, email, password } = req.body;
    
            // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
            const isExistEmail = await User.findOne({
                where: { email }
            });
    
            if (isExistEmail) {
                return ApiResponse.error(res, {
                    status: 400,
                    data: {
                        email: 'Email ƒë√£ t·ªìn t·∫°i'
                    }
                });
            }
    
            
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);
    
            // T·∫°o t√†i kho·∫£n m·ªõi
            const user = await User.create({
                name,
                email,
                password: hashedPassword,
                roleId: 2
            });
    
            // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
            return ApiResponse.success(res, {
                status: 201,
                data: {
                    message: 'ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng',
                    user
                }
            });
    
        } catch (err) {
            console.error('‚ùå L·ªói t·∫°i register:', err);
            next(err);
        }
    }
    

   
    async login(req, res, next) {
        try {
        const { email, password } = req.body;

        // L·∫•y user k√®m role
        const user = await User.findOne({
            where: { email },
            include: {
    model: Role,
    as: 'role',
    attributes: ['id', 'name'] 
    }

        });

        if (!user) {
            return ApiResponse.error(res, {
            status: 401,
            data: {
                message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
            }
            });
        }

        if (!user.isActive) {
            return ApiResponse.error(res, {
            status: 403,
            data: {
                message: 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
            }
            });
        }

        const isMatchPassword = bcrypt.compareSync(password, user.password);
        if (!isMatchPassword) {
            return ApiResponse.error(res, {
            status: 400,
            data: {
                password: 'M·∫≠t kh·∫©u ch∆∞a ch√≠nh x√°c'
            }
            });
        }

        // Token ch·ª©a ID
        const token = jwt.sign(
            {
            id: user.id
            },
            env.SECRET_KEY,
            {
            expiresIn: '5d'
            }
        );

        // Tr·∫£ v·ªÅ role ƒë·∫ßy ƒë·ªß
        const userFinal = {
            id: user.id,
            name: user.name,
            email: user.email,
            avatar: user.avatar,
            role: user.role // Tr·∫£ v·ªÅ object: { id, name }
        };

        return ApiResponse.success(res, {
            status: 200,
            data: {
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            user: userFinal,
            token
            }
        });
        } catch (err) {
        console.error('L·ªói trong login():', err); 
        next(err);
        }
    }

async forgotPassword(req, res, next) {
  try {
    const { email } = req.body;

    const user = await User.findOne({ where: { email } });
    if (!user) {
      throw new ErrorResponse(404, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
    }


    const existedOtp = await Otp.findOne({ where: { email } });
    if (existedOtp) {
      await Otp.destroy({ where: { email } });
    }


    const code = Math.floor(1000 + Math.random() * 9000);

    
    
    await Otp.create({
      email,
      otp: code.toString(),
    });

    const message = `M√£ x√°c nh·∫≠n c·ªßa b·∫°n l√†: ${code}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.`;

    await EmailService.sendMail(
      user.email,
      "M√£ x√°c nh·∫≠n kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      `<p>${message}</p>`
    );

    return res.status(200).json({
      status: 200,
      message: 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ x√°c nh·∫≠n kh√¥i ph·ª•c m·∫≠t kh·∫©u'
    });
  } catch (err) {
    console.error('L·ªói trong forgotPassword:', err);

    if (err.message && err.message.includes('invalid_client')) {
      return res.status(401).json({
        success: false,
        message: 'Th√¥ng tin x√°c th·ª±c c·ªßa d·ªãch v·ª• email kh√¥ng h·ª£p l·ªá'
      });
    }

    next(err);
  }
}

async googleLogin(req, res, next) {
    try {
      const { token } = req.body;
      console.log('üì¶Google token nh·∫≠n ƒë∆∞·ª£c:', token);   
  
      const ticket = await client.verifyIdToken({
        idToken: token,
        audience: '307086193257-v5iln2iovnbrsuoe99co5scevo46qih8.apps.googleusercontent.com',
      });
  
      const payload = ticket.getPayload();
      const { email, name, picture } = payload;
  
      let user = await User.findOne({
        where: { email },
        include: {
          model: Role,
          as: 'role',
          attributes: ['id', 'name'],
        },
      });
  
      // N·∫øu ch∆∞a c√≥ t√†i kho·∫£n ‚Üí t·∫°o m·ªõi
      if (!user) {
        user = await User.create({
          name,
          email,
          password: null,
          avatar: picture,
          roleId: 2,        // role m·∫∑c ƒë·ªãnh (user)
          isActive: true,
          verified: true,   // x√°c th·ª±c email lu√¥n
        });
  
        // Load l·∫°i user k√®m role
        user = await User.findOne({
          where: { email },
          include: {
            model: Role,
            as: 'role',
            attributes: ['id', 'name'],
          },
        });
      }
  
      if (!user.isActive) {
        return ApiResponse.error(res, {
          status: 403,
          data: {
            message: 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a',
          },
        });
      }
  
      // T·∫°o JWT token
      const accessToken = jwt.sign({ id: user.id }, env.SECRET_KEY, {
        expiresIn: '5d',
      });
  
      // Tr·∫£ v·ªÅ user cu·ªëi
      const userFinal = {
        id: user.id,
        name: user.name,
        email: user.email,
        avatar: user.avatar,
        role: user.role,
      };
  
      return ApiResponse.success(res, {
        status: 200,
        data: {
          message: 'ƒêƒÉng nh·∫≠p b·∫±ng Google th√†nh c√¥ng',
          user: userFinal,
          token: accessToken,
        },
      });
    } catch (err) {
      console.error('L·ªói trong googleLogin:', err);
      return ApiResponse.error(res, {
        status: 401,
        data: {
          message: 'X√°c th·ª±c Google kh√¥ng h·ª£p l·ªá',
        },
      });
    }
  }
  

async verifyForgotToken(req, res, next) {
  try {
    const { token } = req.body;
    // T√¨m token trong b·∫£ng otp_tokens, tr∆∞·ªùng otp
    const existedToken = await Otp.findOne({ where: { otp: token } });
    if (!existedToken) {
      throw new ErrorResponse(404, 'Token kh√¥ng t·ªìn t·∫°i');
    }
    return new ApiResponse(res, {
      status: 200,
      message: 'X√°c th·ª±c th√†nh c√¥ng'
    });
  } catch (err) {
    next(err);
  }
}


async resetPasswords(req, res, next) {
  try {
    const { token, newPassword } = req.body;
    console.log(`Nh·∫≠n y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u v·ªõi m√£ x√°c nh·∫≠n: ${token}`);

    // T√¨m OTP t∆∞∆°ng ·ª©ng
    const otpRecord = await Otp.findOne({ where: { otp: token } });
    console.log(`K·∫øt qu·∫£ t√¨m ki·∫øm m√£ x√°c nh·∫≠n: ${otpRecord}`);

    if (!otpRecord) {
      throw new ErrorResponse(400, 'M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    // N·∫øu mu·ªën ki·ªÉm tra h·∫øt h·∫°n, b·∫°n c√≥ th·ªÉ so s√°nh created_at + 1h
    const expiredTime = new Date(otpRecord.created_at);
    expiredTime.setHours(expiredTime.getHours() + 1);
    if (expiredTime < new Date()) {
      throw new ErrorResponse(400, 'M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n');
    }

    const user = await User.findOne({ where: { email: otpRecord.email } });
    console.log(`K·∫øt qu·∫£ t√¨m ki·∫øm ng∆∞·ªùi d√πng: ${user}`);

    if (!user) {
      throw new ErrorResponse(404, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const salt = await bcrypt.genSalt(parseInt(process.env.BCRYPT_SALT_ROUND));
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    user.password = hashedPassword;
    await user.save();

    // X√≥a OTP sau khi d√πng
    await Otp.destroy({ where: { otp: token } });

    console.log('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.');

    return res.status(200).json({ message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' });
  } catch (err) {
    console.error('L·ªói trong resetPassword:', err);
    next(err);
  }
}


async resendForgotToken(req, res, next) {
  try {
    const { email } = req.body;
    // X√≥a m√£ OTP c≈© n·∫øu c√≥
    await Otp.destroy({ where: { email } });

    const user = await User.findOne({ where: { email } });
    if (!user) {
      throw new ErrorResponse(404, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
    }

    // T·∫°o m√£ OTP m·ªõi
    const code = Math.floor(1000 + Math.random() * 9000).toString();

    await Otp.create({
      email,
      otp: code,
      created_at: new Date()
    });

    const message = `M√£ x√°c nh·∫≠n c·ªßa b·∫°n l√†: ${code}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.`;

    await EmailService.sendMail(
      user.email,
      "M√£ x√°c nh·∫≠n kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      `<p>${message}</p>`
    );

    return new ApiResponse(res, {
      status: 200,
      message: 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ kh√¥i ph·ª•c m·∫≠t kh·∫©u'
    });
  } catch (err) {
    next(err);
  }
}

}

module.exports = new AuthController()
